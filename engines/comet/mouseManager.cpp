/* ScummVM - Graphic Adventure Engine
*
* ScummVM is the legal property of its developers, whose names
* are too numerous to list here. Please refer to the COPYRIGHT
* file distributed with this source distribution.
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
*
*/

#include "comet/mouseManager.h"
#include "comet/comet.h"
#include"graphics/cursorman.h"

namespace Cometengine {
	MouseManager::MouseManager(CometEngine* vm) : _vm(vm), _initialized(false), _cursorData(defaultCursors[0]),
		_customCursorData(),
		//_cursorBackgroundData(), _mouseBackgroundBuffer(nullptr),
		_tmpCursorBuffer(),
		//_cursorWidth(16), _cursorHeight(16), _cursorOffset(0), _prevCursorOffset(0),
		_mouseEnabled(false),
		//_prevMouseDrawX(0), _prevMouseDrawY(0), _mouseDrawX(0), _mouseDrawY(0), _mouseX(0), _mouseY(0),
		_cursorGraphics(nullptr),
		_loadedCursors{nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr}
		//_cursor0(nullptr), _cursor1(nullptr), _cursor2(nullptr),
		//_cursor3(nullptr), _cursor4(nullptr), _cursor5(nullptr), _cursor6(nullptr)
		{
	}
	MouseManager::~MouseManager() {
		delete _cursorGraphics;
	}
	void MouseManager::loadCursorsGraphics(uint8* dataPtr, uint8 numCursors) {
		_cursorGraphics = dataPtr;
		/*
		_cursor0 = _vm->_gMgr->getGraphicsData(1, 0, _cursorGraphics);
		_cursor1 = _vm->_gMgr->getGraphicsData(1, 1, _cursorGraphics);
		_cursor2 = _vm->_gMgr->getGraphicsData(1, 2, _cursorGraphics);
		_cursor3 = _vm->_gMgr->getGraphicsData(1, 3, _cursorGraphics);
		_cursor4 = _vm->_gMgr->getGraphicsData(1, 4, _cursorGraphics);
		_cursor5 = _vm->_gMgr->getGraphicsData(1, 5, _cursorGraphics);
		_cursor6 = _vm->_gMgr->getGraphicsData(1, 6, _cursorGraphics);
		*/
		for (uint8 i = 0; i < numCursors; i++) {
			_loadedCursors[i] = _vm->_gMgr->getGraphicsData(1, i, _cursorGraphics);
		}
		_initialized = true;
	}
	const uint8 *MouseManager::setMouseCursor(int idx, uint8* ptr) {
		const uint8* retVal = _cursorData;
		if (idx < 0) return retVal;
		if (idx == 0) {
			memcpy(_customCursorData, ptr, 0x100);
			_cursorData = _customCursorData;
		}
		else {
			_cursorData = defaultCursors[idx - 1];
		}
		decompressMouse(_cursorData);
		CursorMan.replaceCursor(_tmpCursorBuffer, 16, 16, 0, 0, 0);
		/*
		if (!_mouseEnabled) {
			_prevMouseDrawX = -1;
			_prevMouseDrawY = -1;
		}
		*/
		return retVal;
	}
	/*

	void MouseManager::deleteMouseCursor() {
		if (_cursorHeight > 0 && _cursorWidth > 0) {
			uint8* src = _cursorBackgroundData;
			uint8* dst = _mouseBackgroundBuffer + _cursorOffset;
			for (uint8 i = 0; i < _cursorHeight; i++) {
				memcpy(dst, src, _cursorWidth);
				dst += _COMET_XRESOLUTION;
				src += _cursorHeight;
			}
			_vm->_gMgr->unlockMainSurface();

		}
	}
	*/

	void MouseManager::setMouseVisibility(uint32 check) {
		CursorMan.showMouse(check);
		/*
		if (check == 0) {
			if (_mouseEnabled == true) {
				_mouseDrawX = _mouseX;
				_prevMouseDrawX = 0;
				_mouseDrawY = _mouseY;
				_prevMouseDrawY = 0;
				_prevCursorOffset = 0;
				_mouseEnabled = false;
			}
		}
		else {
			if (_mouseEnabled == false) {
				_mouseEnabled = true;
				if (_prevCursorOffset == 0) {
					deleteMouseCursor();
				}
			}
		}
		*/
	}
	void MouseManager::decompressMouse(const uint8* src) {
		uint8* dst = _tmpCursorBuffer;
		memset(dst, 0, 256);
		for (uint8 i = 0; i < 16; i++) {
			uint8 count = *src++;
			for (uint8 j = 0; j < count; j++) {
				uint8 skip = *src++;
				dst += skip;
				uint8 numPixs = *src++;
				numPixs = (numPixs * 4) + *src++;
				for (uint8 k = 0; k < numPixs; k++) {
					*dst++ = *src++;
				}
				skip = *src++;
				dst += skip;
			}
		}

	}
	/*
	void MouseManager::saveCursorBackground(uint8* videobuffer) {
		_mouseBackgroundBuffer = videobuffer;
		_cursorOffset = _mouseDrawX + (_mouseDrawY * 320);
		uint8* src = _mouseBackgroundBuffer + _cursorOffset;
		uint8* dst = _cursorBackgroundData;
		if (_cursorWidth != 0 && _cursorHeight != 0) {
			for (uint8 i = 0; i < _cursorHeight; i++) {
				memcpy(dst, src, _cursorWidth);
				dst += _cursorWidth;
				src += _COMET_XRESOLUTION;
			}
		}
	}
	void MouseManager::drawMouse() {
		if (_cursorWidth != 0 && _cursorHeight != 0) {
			if (_cursorWidth >= 16) {
				const uint8* src = _cursorData;
				uint8* dst = _mouseBackgroundBuffer + _cursorOffset;
				for (uint8 i = 0; i < _cursorHeight; i++) {
					uint8 count = *src++;
					for (uint8 j = 0; j < count; j++) {
						uint8 skip = *src++;
						dst += skip;
						uint8 numPixs = *src++;
						numPixs = (numPixs * 4) + *src++;
						for (uint8 k = 0; k < numPixs; k++) {
							*dst++ = *src++;
						}
						skip = *src++;
						dst += skip;
						dst += _COMET_XRESOLUTION - 16;
					}
				}

			}
			else {
				// first: we draw the whole cursor into a temp buffer
				const uint8* src = _cursorData;
				uint8* dst = _tmpCursorBuffer;
				for (uint8 i = 0; i < _cursorHeight; i++) {
					uint8 count = *src++;
					for (uint8 j = 0; j < count; j++) {
						uint8 skip = *src++;
						for (uint8 k = 0; k < skip; k++) {
							*dst++ = 0;
						}
						uint8 numPixs = *src++;
						numPixs = (numPixs * 4) + *src++;
						for (uint8 k = 0; k < numPixs; k++) {
							*dst++ = *src++;
						}
						skip = *src++;
						for (uint8 k = 0; k < skip; k++) {
							*dst++ = 0;
						}
					}
				}
				src = _tmpCursorBuffer;
				dst = _mouseBackgroundBuffer + _cursorOffset;
				for (uint8 i = 0; i < _cursorHeight; i++) {
					for (uint8 j = 0; j < _cursorWidth; j++) {
						uint8 pix = *src++;
						if (pix != 0) {
							*dst = pix;
						}
						dst++;
					}
					dst += _COMET_XRESOLUTION - _cursorWidth;
					src += 16 - _cursorWidth;
				}

			}
		}
	}
	void MouseManager::mousePreDraw() {
		_cursorWidth = _cursorHeight = 16;
		if (_mouseDrawX > (320 - 16)) {
			_cursorWidth -= _mouseDrawX - (320 - 16);
		}
		if (_mouseDrawY > (200 - 16)) {
			_cursorHeight -= _mouseDrawY - (200 - 16);
		}
		saveCursorBackground(_vm->_gMgr->_videoBackbuffer);
		drawMouse();

	}
	void MouseManager::mousePostDraw() {

	}
	*/
	const uint8 MouseManager::defaultCursor0[] = {
		0x01,
		0x00,
		0x00,
		0x02,
		0xc0,
		0xc0,
		0x0e,
		0x01,
		0x00,
		0x00,
		0x03,
		0xc0,
		0xff,
		0xc0,
		0x0d,
		0x01,
		0x00,
		0x01,
		0x00,
		0xc0,
		0xff,
		0xff,
		0xc0,
		0x0c,
		0x01,
		0x00,
		0x01,
		0x01,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x0b,
		0x01,
		0x00,
		0x01,
		0x02,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x0a,
		0x01,
		0x00,
		0x01,
		0x03,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x09,
		0x01,
		0x00,
		0x02,
		0x00,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x08,
		0x01,
		0x00,
		0x02,
		0x01,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x07,
		0x01,
		0x00,
		0x02,
		0x02,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x06,
		0x01,
		0x00,
		0x02,
		0x03,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0x05,
		0x01,
		0x00,
		0x01,
		0x03,
		0xc0,
		0xff,
		0xff,
		0xc0,
		0xff,
		0xff,
		0xc0,
		0x09,
		0x02,
		0x00,
		0x00,
		0x03,
		0xc0,
		0xff,
		0xc0,
		0x01,
		0x01,
		0x00,
		0xc0,
		0xff,
		0xff,
		0xc0,
		0x08,
		0x02,
		0x00,
		0x00,
		0x02,
		0xc0,
		0xc0,
		0x02,
		0x01,
		0x00,
		0xc0,
		0xff,
		0xff,
		0xc0,
		0x08,
		0x02,
		0x00,
		0x00,
		0x01,
		0xc0,
		0x04,
		0x01,
		0x00,
		0xc0,
		0xff,
		0xff,
		0xc0,
		0x07,
		0x01,
		0x05,
		0x01,
		0x00,
		0xc0,
		0xff,
		0xff,
		0xc0,
		0x07,
		0x01,
		0x06,
		0x00,
		0x03,
		0xc0,
		0xc0,
		0xc0,
		0x07,
	};
	const uint8 MouseManager::defaultCursor1[] = {
		0x01,
		0x07,
		0x00,
		0x01,
		0xff,
		0x08,
		0x01,
		0x06,
		0x00,
		0x03,
		0xff,
		0xc0,
		0xff,
		0x07,
		0x01,
		0x06,
		0x00,
		0x03,
		0xff,
		0xc0,
		0xff,
		0x07,
		0x01,
		0x06,
		0x00,
		0x03,
		0xff,
		0xc0,
		0xff,
		0x07,
		0x01,
		0x06,
		0x00,
		0x03,
		0xff,
		0xc0,
		0xff,
		0x07,
		0x01,
		0x01,
		0x03,
		0x01,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0x02,
		0x02,
		0x00,
		0x01,
		0x02,
		0xff,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0x03,
		0x01,
		0x02,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xff,
		0x01,
		0x01,
		0x01,
		0x03,
		0x01,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0x02,
		0x01,
		0x06,
		0x00,
		0x03,
		0xff,
		0xc0,
		0xff,
		0x07,
		0x01,
		0x06,
		0x00,
		0x03,
		0xff,
		0xc0,
		0xff,
		0x07,
		0x01,
		0x06,
		0x00,
		0x03,
		0xff,
		0xc0,
		0xff,
		0x07,
		0x01,
		0x06,
		0x00,
		0x03,
		0xff,
		0xc0,
		0xff,
		0x07,
		0x01,
		0x07,
		0x00,
		0x01,
		0xff,
		0x08,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
	};
	const uint8 MouseManager::defaultCursor2[] = {
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x06,
		0x00,
		0x02,
		0xc0,
		0xc0,
		0x08,
		0x01,
		0x05,
		0x01,
		0x00,
		0xc0,
		0xff,
		0xff,
		0xc0,
		0x07,
		0x01,
		0x05,
		0x01,
		0x00,
		0xc0,
		0xff,
		0xff,
		0xc0,
		0x07,
		0x01,
		0x04,
		0x01,
		0x02,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x06,
		0x01,
		0x04,
		0x01,
		0x02,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x06,
		0x01,
		0x03,
		0x02,
		0x00,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x05,
		0x01,
		0x03,
		0x02,
		0x00,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x05,
		0x01,
		0x02,
		0x02,
		0x02,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x04,
		0x01,
		0x02,
		0x02,
		0x02,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x04,
		0x01,
		0x02,
		0x02,
		0x02,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xff,
		0xff,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0x04,
		0x01,
		0x05,
		0x01,
		0x00,
		0xc0,
		0xff,
		0xff,
		0xc0,
		0x07,
		0x01,
		0x05,
		0x01,
		0x00,
		0xc0,
		0xff,
		0xff,
		0xc0,
		0x07,
		0x01,
		0x05,
		0x01,
		0x00,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0x07,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,

	};
	const uint8 MouseManager::defaultCursor3[] = {
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x05,
		0x01,
		0x00,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0x07,
		0x01,
		0x05,
		0x01,
		0x00,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0x07,
		0x01,
		0x05,
		0x01,
		0x00,
		0xc0,
		0xff,
		0xff,
		0xc0,
		0x07,
		0x01,
		0x05,
		0x01,
		0x00,
		0xc0,
		0xff,
		0xff,
		0xc0,
		0x07,
		0x01,
		0x02,
		0x02,
		0x02,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xff,
		0xff,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0x04,
		0x01,
		0x02,
		0x02,
		0x02,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x04,
		0x01,
		0x02,
		0x02,
		0x02,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x04,
		0x01,
		0x03,
		0x02,
		0x00,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x05,
		0x01,
		0x03,
		0x02,
		0x00,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x05,
		0x01,
		0x04,
		0x01,
		0x02,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x06,
		0x01,
		0x04,
		0x01,
		0x02,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x06,
		0x01,
		0x05,
		0x01,
		0x00,
		0xc0,
		0xff,
		0xff,
		0xc0,
		0x07,
		0x01,
		0x05,
		0x01,
		0x00,
		0xc0,
		0xff,
		0xff,
		0xc0,
		0x07,
		0x01,
		0x06,
		0x00,
		0x02,
		0xc0,
		0xc0,
		0x08,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
	};
	const uint8 MouseManager::defaultCursor4[] = {
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x04,
		0x00,
		0x03,
		0xc0,
		0xc0,
		0xc0,
		0x09,
		0x01,
		0x04,
		0x01,
		0x01,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x07,
		0x01,
		0x04,
		0x01,
		0x03,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x05,
		0x01,
		0x00,
		0x03,
		0x01,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x03,
		0x01,
		0x00,
		0x03,
		0x03,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x01,
		0x01,
		0x00,
		0x03,
		0x03,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x01,
		0x01,
		0x00,
		0x03,
		0x01,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x03,
		0x01,
		0x04,
		0x01,
		0x03,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x05,
		0x01,
		0x04,
		0x01,
		0x01,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x07,
		0x01,
		0x04,
		0x00,
		0x03,
		0xc0,
		0xc0,
		0xc0,
		0x09,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
	};
	const uint8 MouseManager::defaultCursor5[] = {
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x09,
		0x00,
		0x03,
		0xc0,
		0xc0,
		0xc0,
		0x04,
		0x01,
		0x07,
		0x01,
		0x01,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x04,
		0x01,
		0x05,
		0x01,
		0x03,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x04,
		0x01,
		0x03,
		0x03,
		0x01,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0x00,
		0x01,
		0x01,
		0x03,
		0x03,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x00,
		0x01,
		0x01,
		0x03,
		0x03,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x00,
		0x01,
		0x03,
		0x03,
		0x01,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0x00,
		0x01,
		0x05,
		0x01,
		0x03,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x04,
		0x01,
		0x07,
		0x01,
		0x01,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xc0,
		0x04,
		0x01,
		0x09,
		0x00,
		0x03,
		0xc0,
		0xc0,
		0xc0,
		0x04,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
	};
	const uint8 MouseManager::defaultCursor6[] = {
		0x01,
		0x06,
		0x01,
		0x01,
		0xff,
		0xff,
		0xff,
		0xc0,
		0xc0,
		0x05,
		0x02,
		0x04,
		0x00,
		0x02,
		0xff,
		0xff,
		0x03,
		0x00,
		0x03,
		0xff,
		0xff,
		0xc0,
		0x04,
		0x02,
		0x03,
		0x00,
		0x01,
		0xff,
		0x07,
		0x00,
		0x02,
		0xff,
		0xc0,
		0x03,
		0x03,
		0x02,
		0x00,
		0x01,
		0xff,
		0x01,
		0x00,
		0x01,
		0xff,
		0x07,
		0x00,
		0x02,
		0xff,
		0xc0,
		0x02,
		0x03,
		0x02,
		0x00,
		0x01,
		0xff,
		0x01,
		0x00,
		0x01,
		0xff,
		0x07,
		0x00,
		0x02,
		0xff,
		0xc0,
		0x02,
		0x03,
		0x01,
		0x00,
		0x01,
		0xff,
		0x01,
		0x00,
		0x01,
		0xff,
		0x09,
		0x00,
		0x02,
		0xff,
		0xc0,
		0x01,
		0x03,
		0x01,
		0x00,
		0x01,
		0xff,
		0x01,
		0x00,
		0x01,
		0xff,
		0x09,
		0x00,
		0x02,
		0xff,
		0xc0,
		0x01,
		0x03,
		0x01,
		0x00,
		0x01,
		0xff,
		0x01,
		0x00,
		0x01,
		0xff,
		0x09,
		0x00,
		0x02,
		0xff,
		0xc0,
		0x01,
		0x03,
		0x02,
		0x00,
		0x01,
		0xff,
		0x01,
		0x00,
		0x01,
		0xff,
		0x07,
		0x00,
		0x02,
		0xff,
		0xc0,
		0x02,
		0x02,
		0x02,
		0x00,
		0x01,
		0xff,
		0x09,
		0x00,
		0x02,
		0xff,
		0xc0,
		0x02,
		0x02,
		0x03,
		0x00,
		0x01,
		0xff,
		0x07,
		0x00,
		0x02,
		0xff,
		0xff,
		0x03,
		0x02,
		0x04,
		0x00,
		0x02,
		0xff,
		0xff,
		0x03,
		0x01,
		0x00,
		0xff,
		0xff,
		0xff,
		0xff,
		0x03,
		0x01,
		0x07,
		0x01,
		0x03,
		0xff,
		0xff,
		0xc0,
		0xc0,
		0xff,
		0xff,
		0xff,
		0x02,
		0x01,
		0x0b,
		0x01,
		0x00,
		0xc0,
		0xff,
		0xff,
		0xff,
		0x01,
		0x01,
		0x0c,
		0x01,
		0x00,
		0xc0,
		0xff,
		0xff,
		0xff,
		0x00,
		0x01,
		0x0d,
		0x00,
		0x03,
		0xc0,
		0xc0,
		0xc0,
		0x00,
	};
	const uint8 MouseManager::defaultCursor7[] = {
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,

	};
	const uint8 MouseManager::defaultCursor8[] = {
		0x01, //row0, num
		0x01,
		0x03,
		0x02,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0x01,
		0x02,//row1
		0x00,
		0x03,
		0x02,
		0xff,
		0xc0,
		0xff,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xff,
		0x01,
		0x00,
		0x01,
		0xff,
		0x00,
		0x02,//row2
		0x00,
		0x03,
		0x02,
		0xff,
		0xc0,
		0xff,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xff,
		0x01,
		0x00,
		0x01,
		0xff,
		0x00,
		0x02,
		0x00,
		0x03,
		0x02,
		0xff,
		0xc0,
		0xff,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xff,
		0x01,
		0x00,
		0x01,
		0xff,
		0x00,
		0x02,
		0x00,
		0x03,
		0x02,
		0xff,
		0xc0,
		0xff,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xff,
		0x01,
		0x00,
		0x01,
		0xff,
		0x00,
		0x02,
		0x00,
		0x03,
		0x02,
		0xff,
		0xc0,
		0xff,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xff,
		0x01,
		0x00,
		0x01,
		0xff,
		0x00,
		0x02,
		0x00,
		0x03,
		0x02,
		0xff,
		0xc0,
		0xff,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xff,
		0x01,
		0x00,
		0x01,
		0xff,
		0x00,
		0x01,
		0x00,
		0x04,
		0x00,
		0xff,
		0xc0,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0xc0,
		0xff,
		0x00,
		0x01,
		0x00,
		0x04,
		0x00,
		0xff,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xff,
		0x00,
		0x01,
		0x00,
		0x04,
		0x00,
		0xff,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xff,
		0x00,
		0x01,
		0x00,
		0x04,
		0x00,
		0xff,
		0xc0,
		0xc0,
		0xc0,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xc0,
		0xc0,
		0xc0,
		0xff,
		0x00,
		0x01,
		0x00,
		0x04,
		0x00,
		0xff,
		0xc0,
		0xc0,
		0xff,
		0xc0,
		0xff,
		0xff,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xff,
		0xc0,
		0xc0,
		0xff,
		0x00,
		0x01,
		0x00,
		0x04,
		0x00,
		0xff,
		0xc0,
		0xc0,
		0xff,
		0xc0,
		0xff,
		0xff,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xff,
		0xc0,
		0xc0,
		0xff,
		0x00,
		0x01,
		0x01,
		0x03,
		0x03,
		0xff,
		0xc0,
		0xff,
		0xc0,
		0xff,
		0xff,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xc0,
		0xff,
		0xc0,
		0xc0,
		0xff,
		0x00,
		0x01,
		0x02,
		0x03,
		0x01,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0x01,
		0x01,
		0x00,
		0x00,
		0x00,
		0x10,
	};

	const uint8* MouseManager::defaultCursors[] = {
		MouseManager::defaultCursor0, MouseManager::defaultCursor1, MouseManager::defaultCursor2, MouseManager::defaultCursor3,
		MouseManager::defaultCursor4, MouseManager::defaultCursor5, MouseManager::defaultCursor6, MouseManager::defaultCursor7, MouseManager::defaultCursor8
	};
} // namespace Cometengine
